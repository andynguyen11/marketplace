# -*- coding: utf-8 -*-
# Generated by Django 1.9.4 on 2017-10-12 17:36
from __future__ import unicode_literals

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import tagulous.models.fields
import tagulous.models.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='_Tagulous_SkillTest_coverage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('slug', models.SlugField()),
                ('count', models.IntegerField(default=0, help_text='Internal counter of how many times this tag is in use')),
                ('protected', models.BooleanField(default=False, help_text='Will not be deleted when the count reaches 0')),
            ],
            options={
                'ordering': ('name',),
                'abstract': False,
            },
            bases=(tagulous.models.models.BaseTagModel, models.Model),
        ),
        migrations.CreateModel(
            name='SkillTest',
            fields=[
                ('sync_created', models.DateTimeField(auto_now_add=True)),
                ('sync_updated', models.DateTimeField(auto_now=True)),
                ('sync_deleted', models.DateTimeField(null=True)),
                ('test_id', models.CharField(max_length=100, primary_key=True, serialize=False)),
                ('test_name', models.CharField(max_length=100)),
                ('category', models.CharField(max_length=100)),
                ('duration', models.IntegerField()),
                ('total_questions', models.IntegerField()),
                ('passing_marks', models.IntegerField()),
                ('coverage', tagulous.models.fields.TagField(_set_tag_meta=True, autocomplete_view=b'skills_autocomplete', help_text='Enter a comma-separated tag string', initial='Angular.js, JQuery, Python, nginx, uwsgi', to='expertratings._Tagulous_SkillTest_coverage')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SkillTestResult',
            fields=[
                ('transcript_id', models.CharField(max_length=100, primary_key=True, serialize=False)),
                ('percentage', models.FloatField()),
                ('percentile', models.IntegerField()),
                ('average_score', models.FloatField()),
                ('test_result', models.CharField(choices=[(b'PASS', b'PASS'), (b'FAIL', b'FAIL')], max_length=10)),
                ('time', models.DateTimeField()),
                ('test', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='expertratings.SkillTest')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='SkillTestUserFeedback',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content_rating', models.IntegerField()),
                ('content_comments', models.CharField(max_length=500)),
                ('procedure_rating', models.IntegerField()),
                ('procedure_comments', models.CharField(max_length=500)),
                ('errors_found', models.CharField(choices=[(b'yes', b'YES'), (b'no', b'NO')], max_length=10)),
                ('errors_details', models.CharField(max_length=500)),
                ('time', models.DateTimeField()),
                ('test_result', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='expertratings.SkillTestResult')),
            ],
        ),
        migrations.AlterUniqueTogether(
            name='_tagulous_skilltest_coverage',
            unique_together=set([('slug',)]),
        ),
    ]
