packages:
  yum:
    postgresql93-devel: []
    libffi-devel: []
    libcurl-devel: []
    patch: []
    libxslt-devel: []
    libxml2-devel: []
    libjpeg-turbo-devel: []
    libpng-devel: []
    giflib-devel: []
    git: []

commands:
  01_node_install:
    command: 'sudo yum install -y nodejs npm --enablerepo=epel'
  02_pycurl_nss:
    command: "source /opt/python/run/venv/bin/activate && pip install --compile --no-cache-dir pycurl --global-option='--with-nss'"
  03_create_app_logs:
    command: "mkdir -p /var/log/app-logs && \
              touch /var/log/app-logs/app.log && \
              touch /var/log/app-logs/debug.log && \
              touch /var/log/app-logs/sql.log && \
              chmod -R g+s /var/log/app-logs && \
              chown -R wsgi:wsgi /var/log/app-logs"

container_commands:
  00_replace_wsgi_config:
    command: "cp .ebextensions/wsgi.conf /opt/python/ondeck/wsgi.conf"
  01_migrate:
    command: "source /opt/python/run/venv/bin/activate && python manage.py migrate --noinput"
    leader_only: true
  02_update_node:
    command: 'sudo npm install -g n && sudo n stable'
  03_update_npm:
    command: 'sudo npm update -g npm'
  04_npm_install_gulp:
    command: 'sudo npm install && sudo npm install -g gulp-cli'
  05_collectstatic:
    command: "source /opt/python/run/venv/bin/activate && python manage.py collectstatic --noinput"
  06_killotherbeats:
    command: "ps auxww | grep 'celery beat' | awk '{print $2}' | sudo xargs kill -9 || true"
    ignoreErrors: true
  07_restartbeat:
    command: "sudo /usr/local/bin/supervisorctl -c /opt/python/etc/supervisord.conf restart celerybeat"
    leader_only: true

option_settings:
  - namespace: aws:elasticbeanstalk:command
    option_name: Timeout
    value: 600
  - namespace: aws:elasticbeanstalk:container:python
    option_name: WSGIPath
    value: market/wsgi.py
  - namespace: aws:elasticbeanstalk:container:python:staticfiles
    option_name: /static/
    value: static/
  - option_name: DJANGO_SETTINGS_MODULE
    value: market.settings
  - option_name: AWS_STORAGE_BUCKET_NAME
    value: devquity

files:
  "/etc/httpd/conf.d/wsgi_custom.conf":
    mode: "000644"
    owner: root
    group: root
    content: |
      WSGIApplicationGroup %{GLOBAL}
      WSGIPassAuthorization On

  "/opt/elasticbeanstalk/hooks/appdeploy/post/run_supervised_celeryd.sh":
    mode: "000755"
    owner: root
    group: root
    content: |
      #!/usr/bin/env bash

      # Get django environment variables
      celeryenv=`cat /opt/python/current/env | tr '\n' ',' | sed 's/export //g' | sed 's/$PATH/%(ENV_PATH)s/g' | sed 's/$PYTHONPATH//g' | sed 's/$LD_LIBRARY_PATH//g'`
      celeryenv=${celeryenv%?}

      # Create celery configuraiton script
      celeryconf="[program:celeryd]
      ; Set full path to celery program if using virtualenv
      command=/opt/python/run/venv/bin/celery worker -A market --loglevel=INFO

      directory=/opt/python/current/app
      user=wsgi
      numprocs=1
      stdout_logfile=/var/log/celery-worker.log
      stderr_logfile=/var/log/celery-worker.log
      autostart=true
      autorestart=true
      startsecs=10

      ; Need to wait for currently executing tasks to finish at shutdown.
      ; Increase this if you have very long running tasks.
      stopwaitsecs = 600

      ; When resorting to send SIGKILL to the program to terminate it
      ; send SIGKILL to its whole process group instead,
      ; taking care of its children as well.
      killasgroup=true

      ; if rabbitmq is supervised, set its priority higher
      ; so it starts first
      priority=998

      environment=$celeryenv"

      celerybeatconf="[program:celerybeat]
      ; Set full path to celery program if using virtualenv
      command=/opt/python/run/venv/bin/celery beat -A market --loglevel=INFO -S django --pidfile=/tmp/celerybeat.pid

      directory=/opt/python/current/app
      user=nobody
      numprocs=1
      stdout_logfile=/var/log/celery-beat.log
      stderr_logfile=/var/log/celery-beat.log
      autostart=true
      autorestart=true
      startsecs=10

      ; Need to wait for currently executing tasks to finish at shutdown.
      ; Increase this if you have very long running tasks.
      stopwaitsecs = 600

      ; When resorting to send SIGKILL to the program to terminate it
      ; send SIGKILL to its whole process group instead,
      ; taking care of its children as well.
      killasgroup=true

      ; if rabbitmq is supervised, set its priority higher
      ; so it starts first
      priority=998

      environment=$celeryenv"

      # Create the celery supervisord conf script
      echo "$celeryconf" | tee /opt/python/etc/celery.conf
      echo "$celerybeatconf" | tee /opt/python/etc/celerybeat.conf

      # Add configuration script to supervisord conf (if not there already)
      if ! grep -Fxq "[include]" /opt/python/etc/supervisord.conf
          then
          echo "[include]" | tee -a /opt/python/etc/supervisord.conf
          echo "files: celery.conf celerybeat.conf" | tee -a /opt/python/etc/supervisord.conf
      fi

      # Reread the supervisord config
      sudo /usr/local/bin/supervisorctl -c /opt/python/etc/supervisord.conf reread

      # Update supervisord in cache without restarting all services
      sudo /usr/local/bin/supervisorctl -c /opt/python/etc/supervisord.conf update

      # Start/Restart celeryd through supervisord
      sudo /usr/local/bin/supervisorctl -c /opt/python/etc/supervisord.conf restart celeryd